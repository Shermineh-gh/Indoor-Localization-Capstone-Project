<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgr_1_1swifi_1_1header__payload__demux" kind="class" language="C++" prot="public">
    <compoundname>gr::swifi::header_payload_demux</compoundname>
    <basecompoundref prot="public" virt="virtual">block</basecompoundref>
    <includes refid="header__payload__demux_8h" local="no">header_payload_demux.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1swifi_1_1header__payload__demux_1a8d914bb9e00cbe7da23728c7bff34edd" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgr_1_1swifi_1_1header__payload__demux" kindref="compound">header_payload_demux</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;header_payload_demux&gt; gr::swifi::header_payload_demux::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux.h" line="75" column="1" bodyfile="/home/wirlab/gr-swifi/include/swifi/header_payload_demux.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1swifi_1_1header__payload__demux_1aee2564908881a4c220feba323faafc28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1swifi_1_1header__payload__demux_1a8d914bb9e00cbe7da23728c7bff34edd" kindref="member">sptr</ref></type>
        <definition>static sptr gr::swifi::header_payload_demux::make</definition>
        <argsstring>(int header_len, int output_items_per_symbol, int guard_interval=0, const std::string &amp;length_tag_key=&quot;frame_len&quot;, const std::string &amp;trigger_tag_key=&quot;trigger&quot;, bool output_symbols=false, size_t itemsize=sizeof(gr_complex), const std::string &amp;phy_tag_key=&quot;phy&quot;)</argsstring>
        <name>make</name>
        <param>
          <type>int</type>
          <declname>header_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_items_per_symbol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>guard_interval</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>length_tag_key</declname>
          <defval>&quot;frame_len&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger_tag_key</declname>
          <defval>&quot;trigger&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>output_symbols</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>itemsize</declname>
          <defval>sizeof(gr_complex)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>phy_tag_key</declname>
          <defval>&quot;phy&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of symbols per header </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_items_per_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items per output symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guard_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items between two consecutive symbols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the frame length tag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the trigger tag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Output symbols (true) or items (false)? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itemsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Item size (bytes per item) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phy_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of PHY tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux.h" line="87" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header/Payload demuxer. </para>    </briefdescription>
    <detaileddescription>
<para>This block is designed to handle packets from a bursty transmission. The input takes a continuous transmission of samples. Unless a tag with the key specified in <computeroutput>trigger_tag_key</computeroutput> is found, samples from the input are dropped. The trigger tag can have pmt::PMT_T or pmt::PMT_F, where the former indicates the frame start, while the latter indicates the frame end.</para><para>Once a pmt::PMT_T trigger is found, a total of <computeroutput>header_len</computeroutput> items are copied to output 0. The block then stalls until it receives a message on the message port <computeroutput>header_data</computeroutput>. The message must be a PMT dictionary; all key/value pairs are copied as tags to the first item of the payload (which is assumed to be the first item after the header). The value corresponding to the key specified in <computeroutput>length_tag_key</computeroutput> is read and taken as the payload length. The payload, together with the header data as tags, is then copied to output 1. The copying of symbols to payload is stopped once the number of copied symbols reaches the payload length value specified in <computeroutput>length_tag_key</computeroutput>, or once the pmt::PMT_F trigger tag is found.</para><para>If specified, <computeroutput>guard_interval</computeroutput> items are discarded before every symbol. This is useful for demuxing bursts of OFDM signals.</para><para>Any tags on the input stream are copied to the corresponding output <emphasis>if</emphasis> they&apos;re on an item that is propagated. Note that a tag on the header items is copied to the header stream; that means the header-parsing block must handle these tags if they should go on the payload. A special case are tags on items that make up the guard interval. These are copied to the first item of the following symbol. If a tag is situated very close to the end of the payload, it might be unclear if it belongs to this packet or the following. In this case, the tag might be propagated twice.</para><para>Tags outside of packets are generally discarded. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="106">
        <label>block</label>
      </node>
      <node id="105">
        <label>gr::swifi::header_payload_demux</label>
        <link refid="classgr_1_1swifi_1_1header__payload__demux"/>
        <childnode refid="106" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="108">
        <label>block</label>
      </node>
      <node id="107">
        <label>gr::swifi::header_payload_demux</label>
        <link refid="classgr_1_1swifi_1_1header__payload__demux"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux.h" line="73" column="1" bodyfile="/home/wirlab/gr-swifi/include/swifi/header_payload_demux.h" bodystart="72" bodyend="93"/>
    <listofallmembers>
      <member refid="classgr_1_1swifi_1_1header__payload__demux_1aee2564908881a4c220feba323faafc28" prot="public" virt="non-virtual"><scope>gr::swifi::header_payload_demux</scope><name>make</name></member>
      <member refid="classgr_1_1swifi_1_1header__payload__demux_1a8d914bb9e00cbe7da23728c7bff34edd" prot="public" virt="non-virtual"><scope>gr::swifi::header_payload_demux</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
