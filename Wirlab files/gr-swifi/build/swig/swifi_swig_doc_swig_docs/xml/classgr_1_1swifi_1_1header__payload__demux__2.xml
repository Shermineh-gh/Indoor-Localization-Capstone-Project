<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgr_1_1swifi_1_1header__payload__demux__2" kind="class" language="C++" prot="public">
    <compoundname>gr::swifi::header_payload_demux_2</compoundname>
    <basecompoundref prot="public" virt="virtual">block</basecompoundref>
    <includes refid="header__payload__demux__2_8h" local="no">header_payload_demux_2.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1swifi_1_1header__payload__demux__2_1a50089c6cc40eba7a7ea405b2b5c3222d" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgr_1_1swifi_1_1header__payload__demux__2" kindref="compound">header_payload_demux_2</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;header_payload_demux_2&gt; gr::swifi::header_payload_demux_2::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux_2.h" line="81" column="1" bodyfile="/home/wirlab/gr-swifi/include/swifi/header_payload_demux_2.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1swifi_1_1header__payload__demux__2_1a34e49eae9bb86cf28dc4bfc257858168" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1swifi_1_1header__payload__demux__2_1a50089c6cc40eba7a7ea405b2b5c3222d" kindref="member">sptr</ref></type>
        <definition>static sptr gr::swifi::header_payload_demux_2::make</definition>
        <argsstring>(int header_len, int items_per_symbol, int guard_interval=0, const std::string &amp;length_tag_key=&quot;frame_len&quot;, const std::string &amp;trigger_tag_key=&quot;&quot;, bool output_symbols=false, size_t itemsize=sizeof(gr_complex), const std::string &amp;timing_tag_key=&quot;&quot;, const double samp_rate=1.0, const std::vector&lt; std::string &gt; &amp;special_tags=std::vector&lt; std::string &gt;())</argsstring>
        <name>make</name>
        <param>
          <type>int</type>
          <declname>header_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>items_per_symbol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>guard_interval</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>length_tag_key</declname>
          <defval>&quot;frame_len&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger_tag_key</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>output_symbols</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>itemsize</declname>
          <defval>sizeof(gr_complex)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>timing_tag_key</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>samp_rate</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>special_tags</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of symbols per header </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items_per_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items per symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guard_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items between two consecutive symbols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the frame length tag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the trigger tag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Output symbols (true) or items (false)? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itemsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Item size (bytes per item) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing_tag_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the tag with timing information, usually &apos;rx_time&apos; or empty (this means timing info is discarded) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samp_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling rate at the input. Necessary to calculate the rx time of packets. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>special_tags</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of strings denoting tags which shall be preserved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux_2.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header/Payload demuxer. </para>    </briefdescription>
    <detaileddescription>
<para>This block is designed to handle packets from a bursty transmission. Input 0 takes a continuous transmission of samples. If used, input 1 is a trigger signal. In this case, a 1 on input 1 is a trigger. Otherwise, a tag with the key specified in <computeroutput>trigger_tag_key</computeroutput> is used as a trigger (its value is irrelevant).</para><para>Until a trigger signal is detected, all samples are dropped onto the floor. Once a trigger is detected, a total of <computeroutput>header_len</computeroutput> items are copied to output 0. The block then stalls until it receives a message on the message port <computeroutput>header_data</computeroutput>. The message must be a PMT dictionary; all key/value pairs are copied as tags to the first item of the payload (which is assumed to be the first item after the header). The value corresponding to the key specified in <computeroutput>length_tag_key</computeroutput> is read and taken as the payload length. The payload, together with the header data as tags, is then copied to output 1.</para><para>If specified, <computeroutput>guard_interval</computeroutput> items are discarded before every symbol. This is useful for demuxing bursts of OFDM signals.</para><para>Any tags on the input stream are copied to the corresponding output <emphasis>if</emphasis> they&apos;re on an item that is propagated. Note that a tag on the header items is copied to the header stream; that means the header-parsing block must handle these tags if they should go on the payload. A special case are tags on items that make up the guard interval. These are copied to the first item of the following symbol. If a tag is situated very close to the end of the payload, it might be unclear if it belongs to this packet or the following. In this case, the tag might be propagated twice.</para><para>Tags outside of packets are generally discarded. If this information is important, there are two additional mechanisms to preserve the tags:<itemizedlist>
<listitem><para>Timing tags might be relevant to know <emphasis>when</emphasis> a packet was received. By specifying the name of a timestamp tag and the sample rate at this block, it keeps track of the time and will add the time to the first item of every packet. The name of the timestamp tag is usually &apos;rx_time&apos; (see gr::uhd::usrp_source::make()). The time value must be specified in the UHD time format.</para></listitem><listitem><para>Other tags are simply stored and updated. As an example, the user might want to know the rx frequency, which UHD stores in the rx_freq tag. In this case, add the tag name &apos;rx_freq&apos; to the list of <computeroutput>special_tags</computeroutput>. This block will then always save the most current value of &apos;rx_freq&apos; and add it to the beginning of every packet. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="110">
        <label>block</label>
      </node>
      <node id="109">
        <label>gr::swifi::header_payload_demux_2</label>
        <link refid="classgr_1_1swifi_1_1header__payload__demux__2"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="112">
        <label>block</label>
      </node>
      <node id="111">
        <label>gr::swifi::header_payload_demux_2</label>
        <link refid="classgr_1_1swifi_1_1header__payload__demux__2"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/wirlab/gr-swifi/include/swifi/header_payload_demux_2.h" line="79" column="1" bodyfile="/home/wirlab/gr-swifi/include/swifi/header_payload_demux_2.h" bodystart="78" bodyend="107"/>
    <listofallmembers>
      <member refid="classgr_1_1swifi_1_1header__payload__demux__2_1a34e49eae9bb86cf28dc4bfc257858168" prot="public" virt="non-virtual"><scope>gr::swifi::header_payload_demux_2</scope><name>make</name></member>
      <member refid="classgr_1_1swifi_1_1header__payload__demux__2_1a50089c6cc40eba7a7ea405b2b5c3222d" prot="public" virt="non-virtual"><scope>gr::swifi::header_payload_demux_2</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
