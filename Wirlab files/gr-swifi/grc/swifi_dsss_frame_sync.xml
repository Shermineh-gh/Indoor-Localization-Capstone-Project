<?xml version="1.0"?>
<block>
  <name>DSSS Frame Sync (No tag)</name>
  <key>swifi_dsss_frame_sync</key>
  <category>SWiFi</category>
  <import>import swifi</import>
  <make>swifi.dsss_frame_sync($samprate_mhz,$taps)
self.$(id).set_demod_reset_tag_key($demod_reset_tag_key)
self.$(id).set_descrambler_reset_tag_key($descrambler_reset_tag_key)
#if $msgq() != None
self.$(id).set_control_message_queue($msgq)
#end if</make>

  <param>
    <name>Sample rate (MHz)</name>
    <key>samprate_mhz</key>
    <value>20</value>
    <type>int</type>
  </param>

  <param>
    <name>Filter taps</name>
    <key>taps</key>
    <value>[]</value>
    <type>raw</type>
    <hide>part</hide>
  </param>

  <param>
    <name>Control Message Queue</name>
    <key>msgq</key>
    <value>None</value>
    <type>raw</type>
    <hide>part</hide>
  </param>

  <param>
    <name>Demodulator Reset Tag</name>
    <key>demod_reset_tag_key</key>
    <value>"demod_reset"</value>
    <type>string</type>
    <hide>part</hide>
  </param>

  <param>
    <name>Descrambler Reset Tag</name>
    <key>descrambler_reset_tag_key</key>
    <value>"descrambler_reset"</value>
    <type>string</type>
    <hide>part</hide>
  </param>

  <!-- Make one 'sink' node per input. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional inputs) -->
  <sink>
    <name>in</name>
    <type>complex</type>
  </sink>

  <!-- Make one 'source' node per output. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional outputs) -->

  <source>
    <name>header</name>
    <type>complex</type>
  </source>

  <source>
    <name>payload</name>
    <type>complex</type>
    <optional>1</optional>
  </source>

</block>
